
Map.setCenter(74.739816, 19.102868,2);
var year='Jan 2016 - Jan 2017';
var col = ee.ImageCollection('MODIS/006/MOD13A2').select('NDVI');
var col1 = ee.ImageCollection('MODIS/006/MOD13A2').select('EVI');

var mask = ee.FeatureCollection('USDOS/LSIB_SIMPLE/2017')
  .filter(ee.Filter.eq('country_na', 'India'));


// Defining regional bounds of animation frames here.
//var region = geometry; 
var region = ee.Geometry.Polygon(
  [[[68.493,7.695],
    [68.493,36.629],
    [97.331,7.695],
    [97.331,36.629]]],
  null, false
);



col = col.map(function(img) {
  var doy = ee.Date(img.get('system:time_start')).getRelative('day', 'year');
  return img.set('doy', doy);
});

col1 = col1.map(function(img) {
  var doy = ee.Date(img.get('system:time_start')).getRelative('day', 'year');
  return img.set('doy', doy);
});


var distinctDOY = col.filterDate('2016-01-01', '2017-01-01');
var distinctDOY1 = col1.filterDate('2016-01-01', '2017-01-01');

// Define a filter that identifies which images from the complete collection
// match the DOY from the distinct DOY collection.
var filter = ee.Filter.equals({leftField: 'doy', rightField: 'doy'});
var filter1 = ee.Filter.equals({leftField: 'doy', rightField: 'doy'});

// Define a join.
var join = ee.Join.saveAll('doy_matches');
var join1 = ee.Join.saveAll('doy_matches');

// Apply the join and convert the resulting FeatureCollection to an
// ImageCollection.
var joinCol = ee.ImageCollection(join.apply(distinctDOY, col, filter));
var joinCol1 = ee.ImageCollection(join1.apply(distinctDOY1, col1, filter1));

// Apply median reduction among matching DOY collections.
var comp = joinCol.map(function(img) {
  var doyCol = ee.ImageCollection.fromImages(
    img.get('doy_matches')
  );
  return doyCol.reduce(ee.Reducer.median());
});

var comp1 = joinCol1.map(function(img) {
  var doyCol = ee.ImageCollection.fromImages(
    img.get('doy_matches')
  );
  return doyCol.reduce(ee.Reducer.median());
});


// Define RGB visualization parameters.
var visParams = {
  min: 0.0,
  max: 9000.0,
  palette: [
    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',
    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',
    '012E01', '011D01', '011301'
  ],
};

// Create RGB visualization images for use as animation frames.
var rgbVis = comp.map(function(img) {
  return img.visualize(visParams).clip(mask);
});

var rgbVis1 = comp1.map(function(img) {
  return img.visualize(visParams).clip(mask);
});


// Define GIF visualization parameters.
var gifParams = {
  'region': region,
  'dimensions': 600,
  'crs': 'EPSG:3857',
  'framesPerSecond': 1
};

// Print the GIF URL to the console.
print('URL for the animation Video of NDVI')
print(rgbVis.getVideoThumbURL(gifParams));
print('URL for the animation Video of EVI')
print(rgbVis1.getVideoThumbURL(gifParams));

// Render the GIF animation in the console.
print(year,'NDVI Animation')
print(ui.Thumbnail(rgbVis, gifParams));
print(year, 'EVI Animation')
print(ui.Thumbnail(rgbVis1, gifParams));

